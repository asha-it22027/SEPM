import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class ParkingSimulation {

    // === Inner class: RegistrarParking (like Order) ===
    static class RegistrarParking {
        private static int idCounter = 1;
        private final int carId;

        public RegistrarParking() {
            this.carId = idCounter++;
        }

        public int getCarId() {
            return carId;
        }

        @Override
        public String toString() {
            return "Car#" + carId;
        }
    }

    // === Inner class: ParkingPool (like OrderQueue) ===
    static class ParkingPool {
        private final Queue<RegistrarParking> parkingQueue = new LinkedList<>();

        public synchronized void addCar(RegistrarParking car) {
            parkingQueue.add(car);
            System.out.println(car + " arrived and is waiting to be parked.");
            notifyAll();
        }

        public synchronized RegistrarParking getCar() throws InterruptedException {
            while (parkingQueue.isEmpty()) {
                wait();
            }
            return parkingQueue.poll();
        }
    }

    // === Inner class: ParkingAgent (like DeliveryAgent) ===
    static class ParkingAgent extends Thread {
        private final ParkingPool parkingPool;
        private final String agentName;

        public ParkingAgent(String name, ParkingPool pool) {
            this.agentName = name;
            this.parkingPool = pool;
        }

        public void run() {
            while (true) {
                try {
                    RegistrarParking car = parkingPool.getCar();
                    System.out.println(agentName + " is parking " + car);
                    Thread.sleep(1000); // Simulate parking time
                    System.out.println(agentName + " finished parking " + car);
                } catch (InterruptedException e) {
                    System.out.println(agentName + " has been interrupted.");
                    break;
                }
            }
        }
    }

    // === Main method ===
    public static void main(String[] args) {
        ParkingPool pool = new ParkingPool();

        // Start 3 parking agents
        new ParkingAgent("Agent-A", pool).start();
        new ParkingAgent("Agent-B", pool).start();
        new ParkingAgent("Agent-C", pool).start();

        Scanner scanner = new Scanner(System.in);
        int carCount = 0;

        // Simulate car arrival
        while (carCount < 10) {
            System.out.println("Press Enter to simulate a car arrival (or type 'exit' to stop):");
            String input = scanner.nextLine();
            if (input.equalsIgnoreCase("exit")) {
                break;
            }

            RegistrarParking car = new RegistrarParking();
            pool.addCar(car);
            carCount++;
        }

        scanner.close();
        System.out.println("Simulation ended.");
    }
}
